/*
This file is part of Chathran Strata: https://github.com/takenu/strata
Copyright 2017, Matthijs van Dorp.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#pragma once

#include <tiny/math/vec.h>

namespace strata
{
	namespace mesh
	{
		/** A class to hold parameters used in altering the Terrain.
		  * Such parameters determine the terrain that will be generated by applying modifying actions
		  * such as erosion, compression and sedimentation. */
		class TerrainParameters
		{
			public:
				TerrainParameters(void) :
					iterationStep(0.02f),
					forceDecay(0.2f),
					numForceIterations(5),
					gravityFactor(1.0f),
					buoyancyGradient(1.0f),
					buoyancyCutoff(5.0f),
					extensionResistance(100.0f),
					maxExtensionResistance(5.0f),
					compressionResistance(200.0f),
					compressionForce(1.0f),
					compressionAxis(0.8f,0.0f,0.6f),
					compressionCenter(0.0f,0.0f,0.0f)
				{
				}

				/** The iteration step size, determining how much translation results from a unit force. */
				float iterationStep;

				/** The force decay, determining how much force disappears each iteration step. */
				float forceDecay;

				/** The number of iterations used to equilibrate the force for each deforming iteration. */
				unsigned int numForceIterations;

				/** The strength of gravity. Note that gravity must be counteracted by buoyancy. Therefore,
				  * equilibrium is reached depending on where balance between these two is achieved. */
				float gravityFactor;

				/** The buoyancy force (per meter) as a function of depth that is felt by the base layer.
				  * Buoyancy results from upward forces due to liquid displaced by a submerged object. If
				  * density is constant and the object is not under any of the liquid (i.e. any straight
				  * line starting at the liquid/solid interface going vertically up never reenters the
				  * liquid) we can simplify matters by assuming a force that increases linearly with depth.
				  */
				float buoyancyGradient;

				/** The height at which the buoyancy force is zero. Equals the surface of a hypothetical
				  * liquid layer. */
				float buoyancyCutoff;

				/** The resistance of the terrain to extension. This generates an attractive force between
				  * vertices that are being pulled apart. */
				float extensionResistance;

				/** The maximal attractive force possible for extension resistance. If this force is exceeded,
				  * a fracture is generated. */
				float maxExtensionResistance;

				/** The resistance of the terrain to compression. This generates a repulsive force if two
				  * vertices are forced closer together. */
				float compressionResistance;

				/** The compressional force. */
				float compressionForce;

				/** A vector along which compression takes place on a global scale. */
				tiny::vec3 compressionAxis;

				/** A point along the line of no net force that is perpendicular to the compressionAxis.
				  * Points along this line may move during compression due to pressure imbalances, but
				  * they are subjected to a zero 'artifiial' compressional force (the external force used
				  * to generate terrain deformation).
				  */
				tiny::vec3 compressionCenter;
		};
	}
}
